openapi: 3.0.1
info:
  title: Task Management API v1
  description: |-
    This API exposes RESTful CRUD operations for tracking tasks.

    Some useful links:
    - [Web UI](https://justluxurylifestyle.com/app/open-tasks)
    - [GitHUb source code](https://github.com/fahrican/get-things-done-api)
  license:
    name: MIT License
    url: https://github.com/fahrican/get-things-done-api/blob/master/LICENSE.txt
  version: 1.0.0
servers:
  - url: http://localhost:9091
    description: DEV ENV
  - url: https://task-manager.justluxurylifestyle.com/
    description: PROD ENV
security:
  - BearerAuth: []
paths:
  /api/v1/tasks:
    get:
      tags:
        - task
      summary: Get all tasks
      operationId: getTasks
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - OPEN
              - CLOSED
      responses:
        '200':
          description: all open & closed tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskFetchResponse'
    post:
      tags:
        - task
      summary: Create a new task
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreateRequest'
        required: true
      responses:
        '201':
          description: Task successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFetchResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/auth/sign-up:
    post:
      tags:
        - authentication
      summary: sign-up user
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: sign-up was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '409':
          description: Invalid sign-up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/auth/sign-in:
    post:
      tags:
        - authentication
      summary: sign-in user
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          description: sign-in was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '401':
          description: Invalid sign-in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/users/{id}/password:
    patch:
      tags:
        - user
      summary: change user password
      operationId: changePassword
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordUpdateRequest'
        required: true
      responses:
        '200':
          description: Updating the password was successful
          content:
            application/json: {}
        '409':
          description: wrong issued user ID or password used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/users/{id}/info:
    patch:
      tags:
        - user
      summary: update user information
      operationId: updateInfo
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoUpdateRequest'
        required: true
      responses:
        '200':
          description: Updating information was successful
          content:
            application/json: {}
        '409':
          description: User ID does not match ID of logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /api/v1/tasks/{id}:
    get:
      tags:
        - task
      summary: Get task by its ID
      operationId: getTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Found the task by the supplied ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFetchResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    delete:
      tags:
        - task
      summary: Delete a task by its ID
      operationId: deleteTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task successfully deleted
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
        - task
      summary: Update an existing task
      operationId: updateTask
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdateRequest'
        required: true
      responses:
        '200':
          description: Task successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskFetchResponse'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    TaskCreateRequest:
      required:
        - description
        - isReminderSet
        - isTaskOpen
        - priority
        - timeInterval
      type: object
      properties:
        description:
          maxLength: 255
          minLength: 3
          type: string
        isReminderSet:
          type: boolean
        isTaskOpen:
          type: boolean
        startedOn:
          type: string
          format: date-time
        finishedOn:
          type: string
          format: date-time
        timeInterval:
          type: string
        timeTaken:
          type: integer
          format: int32
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
    TaskFetchResponse:
      required:
        - createdOn
        - description
        - isReminderSet
        - isTaskOpen
        - priority
        - timeInterval
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        isReminderSet:
          type: boolean
        isTaskOpen:
          type: boolean
        createdOn:
          type: string
          format: date-time
        startedOn:
          type: string
          format: date-time
        finishedOn:
          type: string
          format: date-time
        timeInterval:
          type: string
        timeTaken:
          type: integer
          format: int32
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
    ApiError:
      required:
        - code
        - status
        - timestamp
      type: object
      properties:
        message:
          type: string
        status:
          type: string
          enum:
            - 100 CONTINUE
            - 101 SWITCHING_PROTOCOLS
            - 102 PROCESSING
            - 103 EARLY_HINTS
            - 103 CHECKPOINT
            - 200 OK
            - 201 CREATED
            - 202 ACCEPTED
            - 203 NON_AUTHORITATIVE_INFORMATION
            - 204 NO_CONTENT
            - 205 RESET_CONTENT
            - 206 PARTIAL_CONTENT
            - 207 MULTI_STATUS
            - 208 ALREADY_REPORTED
            - 226 IM_USED
            - 300 MULTIPLE_CHOICES
            - 301 MOVED_PERMANENTLY
            - 302 FOUND
            - 302 MOVED_TEMPORARILY
            - 303 SEE_OTHER
            - 304 NOT_MODIFIED
            - 305 USE_PROXY
            - 307 TEMPORARY_REDIRECT
            - 308 PERMANENT_REDIRECT
            - 400 BAD_REQUEST
            - 401 UNAUTHORIZED
            - 402 PAYMENT_REQUIRED
            - 403 FORBIDDEN
            - 404 NOT_FOUND
            - 405 METHOD_NOT_ALLOWED
            - 406 NOT_ACCEPTABLE
            - 407 PROXY_AUTHENTICATION_REQUIRED
            - 408 REQUEST_TIMEOUT
            - 409 CONFLICT
            - 410 GONE
            - 411 LENGTH_REQUIRED
            - 412 PRECONDITION_FAILED
            - 413 PAYLOAD_TOO_LARGE
            - 413 REQUEST_ENTITY_TOO_LARGE
            - 414 URI_TOO_LONG
            - 414 REQUEST_URI_TOO_LONG
            - 415 UNSUPPORTED_MEDIA_TYPE
            - 416 REQUESTED_RANGE_NOT_SATISFIABLE
            - 417 EXPECTATION_FAILED
            - 418 I_AM_A_TEAPOT
            - 419 INSUFFICIENT_SPACE_ON_RESOURCE
            - 420 METHOD_FAILURE
            - 421 DESTINATION_LOCKED
            - 422 UNPROCESSABLE_ENTITY
            - 423 LOCKED
            - 424 FAILED_DEPENDENCY
            - 425 TOO_EARLY
            - 426 UPGRADE_REQUIRED
            - 428 PRECONDITION_REQUIRED
            - 429 TOO_MANY_REQUESTS
            - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
            - 451 UNAVAILABLE_FOR_LEGAL_REASONS
            - 500 INTERNAL_SERVER_ERROR
            - 501 NOT_IMPLEMENTED
            - 502 BAD_GATEWAY
            - 503 SERVICE_UNAVAILABLE
            - 504 GATEWAY_TIMEOUT
            - 505 HTTP_VERSION_NOT_SUPPORTED
            - 506 VARIANT_ALSO_NEGOTIATES
            - 507 INSUFFICIENT_STORAGE
            - 508 LOOP_DETECTED
            - 509 BANDWIDTH_LIMIT_EXCEEDED
            - 510 NOT_EXTENDED
            - 511 NETWORK_AUTHENTICATION_REQUIRED
        code:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
    RegisterRequest:
      required:
        - email
        - firstName
        - lastName
        - password
        - passwordConfirmation
        - username
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string
        passwordConfirmation:
          type: string
    AuthenticationResponse:
      required:
        - accessToken
        - refreshToken
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    AuthenticationRequest:
      required:
        - password
        - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserPasswordUpdateRequest:
      required:
        - currentPassword
        - newPassword
        - newPasswordConfirmation
      type: object
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
        newPasswordConfirmation:
          type: string
    UserInfoUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    TaskUpdateRequest:
      type: object
      properties:
        description:
          type: string
        isReminderSet:
          type: boolean
        isTaskOpen:
          type: boolean
        startedOn:
          type: string
          format: date-time
        finishedOn:
          type: string
          format: date-time
        timeInterval:
          type: string
        timeTaken:
          type: integer
          format: int32
        priority:
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
  securitySchemes:
    BearerAuth:
      type: http
      description: JWT authentication description
      scheme: bearer
      bearerFormat: JWT
